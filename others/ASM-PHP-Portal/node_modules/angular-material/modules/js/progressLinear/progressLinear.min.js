/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v1.0.6-master-76310b1
 */
!function(e,a,r){"use strict";function t(e,r,t){function n(e,a,r){return e.attr("aria-valuemin",0),e.attr("aria-valuemax",100),e.attr("role","progressbar"),d}function d(n,d,u){function l(){u.$observe("value",function(e){var a=i(e);d.attr("aria-valuenow",a),v()!=c&&b(h,a)}),u.$observe("mdBufferValue",function(e){b(p,i(e))}),u.$observe("mdMode",function(e){switch(_&&w.removeClass(_),e){case c:case o:case s:case m:w.addClass(_="_md-mode-"+e);break;default:w.addClass(_="_md-mode-"+m)}})}function f(){if(a.isUndefined(u.mdMode)){var e=a.isDefined(u.value),n=e?s:m,i="Auto-adding the missing md-mode='{0}' to the ProgressLinear element";t.debug(r.supplant(i,[n])),d.attr("md-mode",n),u.mdMode=n}}function v(){var e=(u.mdMode||"").trim();if(e)switch(e){case s:case m:case o:case c:break;default:e=m}return e}function b(e,t){if(v()){var n=r.supplant("translateX({0}%) scale({1},1)",[(t-100)/2,t/100]),d=g({transform:n});a.element(e).css(d)}}e(d);var _,g=r.dom.animator.toCss,p=a.element(d[0].querySelector("._md-bar1")),h=a.element(d[0].querySelector("._md-bar2")),w=a.element(d[0].querySelector("._md-container"));d.attr("md-mode",v()),f(),l()}function i(e){return Math.max(0,Math.min(e||0,100))}var s="determinate",m="indeterminate",o="buffer",c="query";return{restrict:"E",template:'<div class="_md-container"><div class="_md-dashed"></div><div class="_md-bar _md-bar1"></div><div class="_md-bar _md-bar2"></div></div>',compile:n}}a.module("material.components.progressLinear",["material.core"]).directive("mdProgressLinear",t),t.$inject=["$mdTheming","$mdUtil","$log"]}(window,window.angular);